<p>
<script type="text/javascript">// <![CDATA[
// Run the code when the DOM is ready
$( pieChart );

function pieChart() {

  // Config settings
  var chartSizePercent = 55;                        // The chart radius relative to the canvas width/height (in percent)
  var sliceBorderWidth = 1;                         // Width (in pixels) of the border around each slice
  var sliceBorderStyle = "#fff";                    // Colour of the border around each slice
  var sliceGradientColour = "#ddd";                 // Colour to use for one end of the chart gradient
  var maxPullOutDistance = 20;                      // How far, in pixels, to pull slices out when clicked
  var pullOutFrameStep = 4;                         // How many pixels to move a slice with each animation frame
  var pullOutFrameInterval = 40;                    // How long (in ms) between each animation frame
  var pullOutLabelPadding = 80;                     // Padding between pulled-out slice and its label  
  var pullOutLabelFont = "bold 16px 'Trebuchet MS', Verdana, sans-serif";  // Pull-out slice label font
  var pullOutValueFont = "bold 12px 'Trebuchet MS', Verdana, sans-serif";  // Pull-out slice value font
  var offsetTextWidth = 270;
  var offsetTextHeight1 = 0;
  var offsetTextHeight2 = 0;
  var offsetTextHeight3 = 0; 
  var pullOutValuePrefix = "$";                     // Pull-out slice value prefix
  var pullOutValueSuffix = ",000,000";                     // Pull-out slice value prefix
  
  var pullOutShadowColour = "rgba( 0, 0, 0, .5 )";  // Colour to use for the pull-out slice shadow
  var pullOutShadowOffsetX = 5;                     // X-offset (in pixels) of the pull-out slice shadow
  var pullOutShadowOffsetY = 5;                     // Y-offset (in pixels) of the pull-out slice shadow
  var pullOutShadowBlur = 5;                        // How much to blur the pull-out slice shadow
  var pullOutBorderWidth = 2;                       // Width (in pixels) of the pull-out slice border
  var pullOutBorderStyle = "#333";                  // Colour of the pull-out slice border
  var chartStartAngle = -.5 * Math.PI;              // Start the chart at 12 o'clock instead of 3 o'clock

  // Declare some variables for the chart
  var canvas;                       // The canvas element in the page
  var currentPullOutSlice = -1;     // The slice currently pulled out (-1 = no slice)
  var currentPullOutDistance = 0;   // How many pixels the pulled-out slice is currently pulled out in the animation
  var animationId = 0;              // Tracks the interval ID for the animation created by setInterval()
  var chartData = [];               // Chart data (labels, values, and angles)
  var chartColours = [];            // Chart colours (pulled from the HTML table)
  var totalValue = 0;               // Total of all the values in the chart
  var canvasWidth;                  // Width of the canvas, in pixels
  var canvasHeight;                 // Height of the canvas, in pixels
  var centreX;                      // X-coordinate of centre of the canvas/chart
  var centreY;                      // Y-coordinate of centre of the canvas/chart
  var chartRadius;                  // Radius of the pie chart, in pixels

  var diseaseModifyingText = "Alphasynuclein LRRK2 Trophic Factors Other";


  // Set things up and draw the chart
  init();


  /**
   * Set up the chart data and colours, as well as the chart and table click handlers,
   * and draw the initial pie chart
   */

  function init() {

    // Get the canvas element in the page
    canvas = document.getElementById('chart');

    // Exit if the browser isn't canvas-capable
    if ( typeof canvas.getContext === 'undefined' ) return;

    // Initialise some properties of the canvas and chart
    canvasWidth = canvas.width;
    canvasHeight = canvas.height;
    centreX = canvasWidth / 2;
    centreY = canvasHeight / 2;
    chartRadius = Math.min( canvasWidth, canvasHeight ) / 1.4 * ( chartSizePercent / 100 );

    // Grab the data from the table,
    // and assign click handlers to the table data cells
    
    var currentRow = -1;
    var currentCell = 0;

    $('#chartData td').each( function() {
      currentCell++;
      if ( currentCell % 2 != 0 ) {
        currentRow++;
        chartData[currentRow] = [];
        chartData[currentRow]['label'] = $(this).text();
      } else {
       var value = parseFloat($(this).text());
       totalValue += value;
     //  value = value.toFixed(2);
       chartData[currentRow]['value'] = value;
      }

      // Store the slice index in this cell, and attach a click handler to it
      $(this).data( 'slice', currentRow );
      $(this).click( handleTableClick );

      // Extract and store the cell colour
      if ( rgb = $(this).css('color').match( /rgb\((\d+), (\d+), (\d+)/) ) {
        chartColours[currentRow] = [ rgb[1], rgb[2], rgb[3] ];
      } else if ( hex = $(this).css('color').match(/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/) ) {
        chartColours[currentRow] = [ parseInt(hex[1],16) ,parseInt(hex[2],16), parseInt(hex[3], 16) ];
      } else {
        alert( "Error: Colour could not be determined! Please specify table colours using the format '#xxxxxx'" );
        return;
      }

    } );

    // Now compute and store the start and end angles of each slice in the chart data

    var currentPos = 0; // The current position of the slice in the pie (from 0 to 1)

    for ( var slice in chartData ) {
      chartData[slice]['startAngle'] = 2 * Math.PI * currentPos;
      chartData[slice]['endAngle'] = 2 * Math.PI * ( currentPos + ( chartData[slice]['value'] / totalValue ) );
      currentPos += chartData[slice]['value'] / totalValue;
    }

    // All ready! Now draw the pie chart, and add the click handler to it
    drawChart();
    $('#chart').click ( handleChartClick );
  }


  /**
   * Process mouse clicks in the chart area.
   *
   * If a slice was clicked, toggle it in or out.
   * If the user clicked outside the pie, push any slices back in.
   *
   * @param Event The click event
   */

  function handleChartClick ( clickEvent ) {

    // Get the mouse cursor position at the time of the click, relative to the canvas
    var mouseX = clickEvent.pageX - this.offsetLeft;
    var mouseY = clickEvent.pageY - this.offsetTop;

    // Was the click inside the pie chart?
    var xFromCentre = mouseX - centreX;
    var yFromCentre = mouseY - centreY;
    var distanceFromCentre = Math.sqrt( Math.pow( Math.abs( xFromCentre ), 2 ) + Math.pow( Math.abs( yFromCentre ), 2 ) );

    if ( distanceFromCentre <= chartRadius ) {

      // Yes, the click was inside the chart.
      // Find the slice that was clicked by comparing angles relative to the chart centre.

      var clickAngle = Math.atan2( yFromCentre, xFromCentre ) - chartStartAngle;
      if ( clickAngle < 0 ) clickAngle = 2 * Math.PI + clickAngle;
                  
      for ( var slice in chartData ) {
        if ( clickAngle >= chartData[slice]['startAngle'] && clickAngle <= chartData[slice]['endAngle'] ) {

          // Slice found. Pull it out or push it in, as required.
          toggleSlice ( slice );
          return;
        }
      }
    }

    // User must have clicked outside the pie. Push any pulled-out slice back in.
    pushIn();
  }


  /**
   * Process mouse clicks in the table area.
   *
   * Retrieve the slice number from the jQuery data stored in the
   * clicked table cell, then toggle the slice
   *
   * @param Event The click event
   */

  function handleTableClick ( clickEvent ) {
    var slice = $(this).data('slice');
    toggleSlice ( slice );
  }


  /**
   * Push a slice in or out.
   *
   * If it's already pulled out, push it in. Otherwise, pull it out.
   *
   * @param Number The slice index (between 0 and the number of slices - 1)
   */

  function toggleSlice ( slice ) {
    if ( slice == currentPullOutSlice ) {
      pushIn();
    } else {
      startPullOut ( slice );
    }
  }

 
  /**
   * Start pulling a slice out from the pie.
   *
   * @param Number The slice index (between 0 and the number of slices - 1)
   */

  function startPullOut ( slice ) {

    // Exit if we're already pulling out this slice
    if ( currentPullOutSlice == slice ) return;

    // Record the slice that we're pulling out, clear any previous animation, then start the animation
    currentPullOutSlice = slice;
    currentPullOutDistance = 0;
    clearInterval( animationId );
    animationId = setInterval( function() { animatePullOut( slice ); }, pullOutFrameInterval );

    // Highlight the corresponding row in the key table
    $('#chartData td').removeClass('highlight');
    var labelCell = $('#chartData td:eq(' + (slice*2) + ')');
    var valueCell = $('#chartData td:eq(' + (slice*2+1) + ')');
    labelCell.addClass('highlight');
    valueCell.addClass('highlight');
    alert
  }

 
  /**
   * Draw a frame of the pull-out animation.
   *
   * @param Number The index of the slice being pulled out
   */

  function animatePullOut ( slice ) {

    // Pull the slice out some more
    currentPullOutDistance += pullOutFrameStep;

    // If we've pulled it right out, stop animating
    if ( currentPullOutDistance >= maxPullOutDistance ) {
      clearInterval( animationId );
      return;
    }

    // Draw the frame
    drawChart();
  }

 
  /**
   * Push any pulled-out slice back in.
   *
   * Resets the animation variables and redraws the chart.
   * Also un-highlights all rows in the table.
   */

  function pushIn() {
    currentPullOutSlice = -1;
    currentPullOutDistance = 0;
    clearInterval( animationId );
    drawChart();
    $('#chartData td').removeClass('highlight');
  }
 
 
  /**
   * Draw the chart.
   *
   * Loop through each slice of the pie, and draw it.
   */

  function drawChart() {

    // Get a drawing context
    var context = canvas.getContext('2d');
        
    // Clear the canvas, ready for the new frame
    context.clearRect ( 0, 0, canvasWidth, canvasHeight );

    // Draw each slice of the chart, skipping the pull-out slice (if any)
    for ( var slice in chartData ) {
      if ( slice != currentPullOutSlice ) drawSlice( context, slice,offsetTextWidth );
    }

    // If there's a pull-out slice in effect, draw it.
    // (We draw the pull-out slice last so its drop shadow doesn't get painted over.)
    if ( currentPullOutSlice != -1 ) drawSlice( context, currentPullOutSlice, offsetTextWidth );
  }


  /**
   * Draw an individual slice in the chart.
   *
   * @param Context A canvas context to draw on  
   * @param Number The index of the slice to draw
   */

  function drawSlice ( context, slice, offsetTextWidth ) {

    // Compute the adjusted start and end angles for the slice
    var startAngle = chartData[slice]['startAngle']  + chartStartAngle;
    var endAngle = chartData[slice]['endAngle']  + chartStartAngle;
      
    if ( slice == currentPullOutSlice ) {

      // We're pulling (or have pulled) this slice out.
      // Offset it from the pie centre, draw the text label,
      // and add a drop shadow.

      var midAngle = (startAngle + endAngle) / 2;
      var actualPullOutDistance = currentPullOutDistance * easeOut( currentPullOutDistance/maxPullOutDistance, .8 );
      startX = centreX + Math.cos(midAngle) * actualPullOutDistance;
      startY = centreY + Math.sin(midAngle) * actualPullOutDistance;
      // context.fillStyle = 'rgb(' + chartColours[slice].join(',') + ')';
      // context.textAlign = "center";
      // context.font = pullOutLabelFont;
      // context.fillText( chartData[slice]['label'], centreX + offsetTextWidth, centreY + offsetTextHeight1 );
      // context.font = pullOutValueFont;
      // context.fillText( pullOutValuePrefix + chartData[slice]['value'] + pullOutValueSuffix + " (" + ( parseInt( chartData[slice]['value'] / totalValue * 100 + .5 ) ) +  "%)", centreX + offsetTextWidth, centreY + offsetTextHeight2);
      // context.fillText(diseaseModifyingText, centreX + offsetTextWidth, centreY + offsetTextHeight3);
      // context.shadowOffsetX = pullOutShadowOffsetX;
      // context.shadowOffsetY = pullOutShadowOffsetY;
      // context.shadowBlur = pullOutShadowBlur;

    } else {

      // This slice isn't pulled out, so draw it from the pie centre
      startX = centreX;
      startY = centreY;

    }

    // Set up the gradient fill for the slice
    var sliceGradient = context.createLinearGradient( 0, 0, canvasWidth*.75, canvasHeight*.75 );
    sliceGradient.addColorStop( 0, sliceGradientColour );
    sliceGradient.addColorStop( 1, 'rgb(' + chartColours[slice].join(',') + ')' );

    // Draw the slice
    context.beginPath();
    context.moveTo( startX, startY );
    context.arc( startX, startY, chartRadius, startAngle, endAngle, false );
    context.lineTo( startX, startY );
    context.closePath();
    context.fillStyle = sliceGradient;
    context.shadowColor = ( slice == currentPullOutSlice ) ? pullOutShadowColour : "rgba( 0, 0, 0, 0 )";
    context.fill();
    context.shadowColor = "rgba( 0, 0, 0, 0 )";

    // Style the slice border appropriately
    if ( slice == currentPullOutSlice ) {
      context.lineWidth = pullOutBorderWidth;
      context.strokeStyle = pullOutBorderStyle;
    } else {
      context.lineWidth = sliceBorderWidth;
      context.strokeStyle = sliceBorderStyle;
    }

    // Draw the slice border
    context.stroke();
  }


  /**
   * Easing function.
   *
   * A bit hacky but it seems to work! (Note to self: Re-read my school maths books sometime)
   *
   * @param Number The ratio of the current distance travelled to the maximum distance
   * @param Number The power (higher numbers = more gradual easing)
   * @return Number The new ratio
   */

  function easeOut( ratio, power ) {
    return ( Math.pow ( 1 - ratio, power ) + 1 );
  }

};
// ]]></script>
</p>
<h1>Our Parkinson's Research Portfolio</h1>
<p class="intro">Since 2000, we have invested $325 million in Parkinson's Research.</p>
<table id="chartData">
<tbody>
<tr><th>Priority</th><th>Investment ($ Million)</th></tr>
<tr style="color: #f77f00;">
<td>Disease Modifying</td>
<td>320</td>
</tr>
<tr style="color: #9bba43;">
<td>Symptoms &amp; Side Effects</td>
<td>175</td>
</tr>
<tr style="color: #32ccfe;">
<td>Biomarkers</td>
<td>30</td>
</tr>
<tr style="color: #1e485f;">
<td>Research Tools</td>
<td>47</td>
</tr>
<!--    <tr style="color: #057249">
      <td>MicroWidget</td><td>6122.06</td>
    </tr>

    <tr style="color: #5F91DC">
      <td>NanoWidget</td><td>128.11</td>
    </tr>

    <tr style="color: #F88E5D">
      <td>LovelyWidget</td><td>245.55</td>
    </tr> --></tbody>
</table>
<p></p>
<div id="selectedSliceText">
<p>Click on the charts to learn more about a priority.</p>
</div>
<p>At The Michael J. Fox Foundation, we demand the same accountability and transparency of ourselves as of our awardees, and we keep a tight rein on expenses. Fiscal responsibility and transparency are core values, particularly in how we spend supporters' contributions.</p>
<p>We deliberately hold no endowment or excessive reserves, instead seeking to deploy funds raised as quickly and wisely as possible. This is an unusual position for a nonprofit. But we believe that to find a cure for Parkinson's as quickly as possible, our capital needs to push research forward today — not collect interest in a bank account.</p>
<p style="margin: 12px 0;" class="h-divider"> </p>
<h2>Case Studies — Progress Toward a Cure</h2>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">Development of a Potential First-in-Class Symptomatic Treatment for Parkinson's</h3>
<p class="researchPortfolioCollapsibleParagraph">In 1998, MJFF awardee, Jeff Conn of Vanderbilt University, identified a glutamate receptor called mGluR4 that, when activated, seemed to reduce the activity of a particular part of the brain that becomes overactive in people with Parkinson's disease (PD). In 2012, Vanderbilt announced a next step collaboration with Bristol-Myers Squibb for the ongoing development of mGluR4-targeted drugs. <a href="https://www.michaeljfox.org/foundation/news-detail.php?getting-drug-candidates-into-the-clinic">Learn More</a></p>
</div>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">First Clinical Trial for Drug to Treat Parkinson's-Related Cognitive Decline</h3>
<p class="researchPortfolioCollapsibleParagraph">In 2012 MJFF and Sanofi launch clinical trial for drug to treat Parkinson's related cognitive decline. This is an important step toward finding a critically-needed drug for a largely untreated Parkinson's symptom. <a href="https://www.michaeljfox.org/foundation/news-detail.php?michael-fox-foundation-sanofi-launch-clinical-trial-for-drug-to-treat-parkinson-related-cognitive">Learn More</a></p>
</div>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">First-Ever Vaccine Approach to Treating Parkinson's Disease</h3>
<p class="researchPortfolioCollapsibleParagraph">In 2012, thanks in part to a MJFF award, Austrian-based biotech AFFiRiS AG secured major investment in a first ever vaccine approach to modifying the progression of Parkinson's disease. By stimulating the body's immune system to produce antibodies that bind to clumps of the proteinalpha-synuclein that are common in the brains of people with Parkinson's, AFFiRiS aims to clear these clumps, in turn slowing the progression of the disease itself. The company is in the first stage of clinical testing. <a href="https://www.michaeljfox.org/foundation/publication-detail.html?id=68&amp;category=4">Learn More </a></p>
</div>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">Pioneering community validation model to make research “ingredients” readily available</h3>
<p class="researchPortfolioCollapsibleParagraph">The Michael J. Fox Foundation is driving a new approach to the development and distribution of laboratory reagents — critical experimental tools to detect the presence of a gene or protein of interest and speed treatment breakthroughs to people living with Parkinson's disease. Initial success in LRRK2 antibodies has mobilized an emerging field. <a href="https://www.michaeljfox.org/foundation/publication-detail.html?id=258&amp;category=4">Learn More </a></p>
</div>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">Translating genetic understanding of Parkinson's into potential treatments</h3>
<p class="researchPortfolioCollapsibleParagraph">Researchers studying mutations in the LRRK2 gene are gaining new insight into important mechanisms underlying Parkinson's disease (PD) onset and progression. Thanks in part to The Michael J. Fox Foundation's innovative model surrounding LRRK2 drug development, progress is already being made toward treatments that could benefit everyone with PD. <a href="https://www.michaeljfox.org/foundation/publication-detail.html?id=253&amp;category=4">Learn More</a></p>
</div>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">Alpha-Synuclein imaging consortium publishes first paper imaging</h3>
<p class="researchPortfolioCollapsibleParagraph">In 2011, the Foundation established the Consortium to Develop an Alpha-Synuclein Imaging Agent. The ultimate goal is to develop a laboratory tool called a PET radiotracer to image the distribution of alpha-synuclein in the brain. In effect, seeing how alpha-synuclein works in a living Parkinson's brain could serve as a biomarker for the disease. <a href="https://www.michaeljfox.org/foundation/news-detail.php?alpha-synuclein-imaging-consortium-publishes-first-paper">Learn More </a></p>
</div>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">Established the best clinical scale for measuring patient response to therapies to treat dyskinesia</h3>
<p class="researchPortfolioCollapsibleParagraph">In 2012, researchers funded by MJFF have identified UDysRS as the best clinical scale for measuring patient response to therapies to treat dyskinesia, the debilitating, uncontrollable movements that are often a side effect of Parkinson's disease drugs. Establishing UDysRS as a validated tool for use in dyskinesia clinical trials could have important implications: Researchers should be able to better design conclusive clinical trials to verify that a dyskinesia drug is or isn't working. <a href="https://www.michaeljfox.org/foundation/publication-detail.html?id=106&amp;category=3">Learn More</a></p>
</div>
<div class="researchPortoflioCollapsibleContainer">
<h3 class="researchPortfolioCollapsibleHeader">Michael J. Fox Foundation Co-Chairs meeting with FDA to define regulatory path for new drugs to treat cognitive decline</h3>
<p class="researchPortfolioCollapsibleParagraph">MJFF is working directly with the Food and Drug Administration (FDA) to construct the most efficient paradigm for getting new drug candidates approved once we have them. In 2013, MJFF staffers went to Washington, D.C. to co-chair a meeting with the FDA and more than 40 key opinion leaders in the field, to address how to construct such a regulatory path for cognitive impairment moving forward. <a href="https://www.michaeljfox.org/foundation/news-detail.php?mjff-co-chairs-meeting-with-fda-to-define-regulatory-path-for-new-drugs-to-treat">Learn More </a></p>
</div>
<p>
<script type="text/javascript">// <![CDATA[
$(document).ready(function(){
	$('.researchPortfolioCollapsibleParagraph').hide();
	$('.researchPortfolioCollapsibleHeader').click(function(){
			$(this).addClass('selected');
			$(this).next().slideDown();	
		});
	})
// ]]></script>
</p>
